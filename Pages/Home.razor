@page "/"
@using ChatFrontend.Services
@using ChatFrontend.Models
@inject ChatApiService ApiService
@implements IDisposable

<PageTitle>Chat Frontend</PageTitle>

<div class="chat-container">
    <aside class="users-sidebar">
        <h2 class="sidebar-title">Active Users</h2>
        <ul class="users-list">
            @foreach (var user in users)
            {
                <li class="user-item">
                    <div class="user-avatar">@GetInitial(user.Username)</div>
                    <span class="user-name">@user.Username</span>
                    <span class="user-status online"></span>
                </li>
            }
        </ul>
    </aside>

    <main class="chat-main">
        <header class="chat-header">
            <h1>Vibe Coded FAPP Hangout</h1>
            <span class="user-count">@users.Count users online</span>
        </header>

        <div class="messages-container" @ref="messagesContainer">
            @foreach (var chat in chats.OrderBy(c => c.Timestamp))
            {
                <div class="message @(IsOwnMessage(chat) ? "own-message" : "")">
                    <div class="message-header">
                        <span class="message-author">@GetChatUsername(chat)</span>
                        <span class="message-time">@chat.Timestamp.ToLocalTime().ToString("HH:mm")</span>
                    </div>
                    <div class="message-content">@chat.Contents</div>
                </div>
            }
        </div>

        <div class="message-input-container">
            <input type="text" @bind="newMessage" @bind:event="oninput" @onkeypress="@(async (e) => { if (e.Key == "Enter") await SendMessage(); })" 
                   class="message-input" placeholder="Type a message..." disabled="@(currentUser == null)" />
            <button @onclick="SendMessage" class="send-button" disabled="@(currentUser == null || isLoading)">
                @if (isLoading)
                {
                    <span>...</span>
                }
                else
                {
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
                    </svg>
                }
            </button>
        </div>
    </main>
</div>

@if (currentUser == null)
{
    <div class="username-modal">
        <div class="modal-content">
            <h2>Enter your username</h2>
            <input type="text" @bind="username" @bind:event="oninput" @onkeypress="@(async (e) => { if (e.Key == "Enter") await CreateOrLoginUser(); })" 
                   placeholder="Username" class="username-input" />
            <button @onclick="CreateOrLoginUser" class="username-button" disabled="@(string.IsNullOrWhiteSpace(username) || isCreatingUser)">
                @if (isCreatingUser)
                {
                    <span>Joining...</span>
                }
                else
                {
                    <span>Join Chat</span>
                }
            </button>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">@errorMessage</div>
            }
        </div>
    </div>
}

@code {
    private List<User> users = new();
    private List<Chat> chats = new();
    private string newMessage = "";
    private string username = "";
    private User? currentUser;
    private bool isLoading = false;
    private bool isCreatingUser = false;
    private string errorMessage = "";
    private Timer? refreshTimer;
    private ElementReference messagesContainer;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        await LoadChats();
        
        // Set up periodic refresh
        refreshTimer = new Timer(async _ => await RefreshData(), null, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(2));
    }

    private async Task RefreshData()
    {
        await InvokeAsync(async () =>
        {
            await LoadUsers();
            await LoadChats();
            StateHasChanged();
        });
    }

    private async Task LoadUsers()
    {
        try
        {
            users = await ApiService.GetUsersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
    }

    private async Task LoadChats()
    {
        try
        {
            var newChats = await ApiService.GetChatsAsync();
            if (newChats.Count != chats.Count)
            {
                chats = newChats;
                // Scroll to bottom when new messages arrive
                await InvokeAsync(async () =>
                {
                    await Task.Delay(50); // Small delay to ensure DOM is updated
                    await ScrollToBottom();
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading chats: {ex.Message}");
        }
    }

    private async Task CreateOrLoginUser()
    {
        if (string.IsNullOrWhiteSpace(username) || isCreatingUser) return;

        isCreatingUser = true;
        errorMessage = "";
        
        try
        {
            var trimmedUsername = username.Trim();
            Console.WriteLine($"Attempting to login/create user: {trimmedUsername}");
            
            // First, check if user already exists
            var existingUser = users.FirstOrDefault(u => 
                string.Equals(u.Username, trimmedUsername, StringComparison.OrdinalIgnoreCase));
            
            if (existingUser != null)
            {
                // User exists, use existing user
                currentUser = existingUser;
                Console.WriteLine($"User already exists with ID: {currentUser.Id}, logging in");
            }
            else
            {
                // User doesn't exist, create new user
                Console.WriteLine("User doesn't exist, creating new user");
                var user = new User { Username = trimmedUsername };
                currentUser = await ApiService.CreateUserAsync(user);
                
                if (currentUser != null)
                {
                    Console.WriteLine($"User created successfully with ID: {currentUser.Id}");
                    await LoadUsers();
                }
                else
                {
                    errorMessage = "Failed to create user. Please try again.";
                    Console.WriteLine("CreateUserAsync returned null");
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Error creating/logging in user: {ex}");
        }
        finally
        {
            isCreatingUser = false;
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage) || currentUser == null || isLoading) return;

        isLoading = true;
        try
        {
            var request = new ChatCreateRequest
            {
                UserId = currentUser.Id,
                Contents = newMessage.Trim()
            };

            var chat = await ApiService.CreateChatAsync(request);
            if (chat != null)
            {
                newMessage = "";
                await LoadChats();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending message: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetInitial(string name)
    {
        return string.IsNullOrEmpty(name) ? "?" : name.Substring(0, 1).ToUpper();
    }

    private string GetChatUsername(Chat chat)
    {
        // First try to get username from the chat object itself
        if (!string.IsNullOrEmpty(chat.Username))
        {
            return chat.Username;
        }
        
        // Fallback to user object if present
        if (chat.User != null && !string.IsNullOrEmpty(chat.User.Username))
        {
            return chat.User.Username;
        }
        
        // Last resort: find user by ID
        var user = users.FirstOrDefault(u => u.Id == chat.UserId);
        return user?.Username ?? "Unknown";
    }

    private bool IsOwnMessage(Chat chat)
    {
        return currentUser != null && chat.UserId == currentUser.Id;
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await messagesContainer.FocusAsync();
            await Task.Delay(50);
        }
        catch { }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}
